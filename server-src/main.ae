(use '../common-src/common.ae')

(fun remove-last [list]
  (let last (last list))
  (filter (fun [element] (!= element last)) list))

(fun parse-routes [args_left]
  (if args_left
    (let parts (split (head args_left) ':'))
    (let joined (join (remove-last parts) ''))
    (let bytecode (read-file (last parts)))
    (if (unit? bytecode)
      (print '[ERROR] File ')
      (print (last parts)
      (println ' was not found')
      (exit 1)))

    (let route { route: joined bytecode: bytecode })

    (print '[INFO] initialized route ')
    (print (join (remove-last parts) ''))
    (print ' with ')
    (println (last parts))

    (+ route (parse-routes (tail args_left)))
   else
    []))

(fun get-bytecode [routes route]
  (if (is-empty routes)
    []
   elif (== (field (head routes) route) route)
    (field (head routes) bytecode)
   else
    (get-bytecode (tail routes) route)))

(fun send-last-response [client return-code payload]
  (let header (create-header DEFAULT-INTP-VERSION return-code (len payload)))
  (send client (+ header payload))
  (close-connection client))

(if (< (len (get-args)) 3)
  (println '[ERROR] no routes were provided')
  (exit 1))

(let routes (parse-routes (tail (tail (get-args)))))

(let server (create-server 8080))
(if (unit? server)
  (println '[ERROR] failed to create server')
  (exit 1))

(while true
  (let client (accept-connection server 8080))
  (if (unit? client)
    (println '[ERROR] failed to accept new connection')
    (exit 1))

  (let header (parse-header (receive-size client HEADER-SIZE)))
  (let route (receive-size client (field header payload-size)))

  (if (!= (field header return-code) RETURN-CODE-SUCCESS)
    (send-last-response client (field header return-code) '')
   else
    (let bytecode (get-bytecode routes route))
    (if (! bytecode)
      (send-last-response client RETURN-CODE-ROUTE-WAS-NOT-FOUND '')
     else
      (send-last-response client RETURN-CODE-SUCCESS bytecode))))
